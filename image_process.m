function simulation = image_process(simulation, parameters)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Adaptées pour la vérité terrain :
%   Perte Sensibilité:
%   Taux tunnel signal:
%   Taux tunnel mesure
%   Taux tunnel efface
%   Effet Major
% 
% Information disponible sur simulation :
% simulation = struct(...
%     'gates', gates,...
%     'CC', CC,...
%     'n1', n1,...
%     'V_sweep1', V_sweep1,...
%     'n2', n2,...
%     'V_sweep2', Vsweep2,...
%     'integrand_x', integrand_x,...
%     'eps_0', eps_0,...
%     'x', x,...
%     'dx', dx,...
%     'int_min', int_min,...
%     'int_max', int_max,...
%     'int_length', int_length,...
%     'integral_tab', integral_tab,...
%     'occupation', occupation,...
%     'occupation_signal', occupation_signal);
% 
% Suivre cette nomenclature selon la modification à faire:
% parameters = {...
%   {'anticroisement 1', nVgy, angle, e_n, n_sommet};...
%   {'anticroisement 2', d};...
%   {'perte sensibilité', n, nVgx, nVgy, eraser, noise};...
%   {'taux tunnel signal', dw_top, dw_bot, coefx, coefy, moy};...
%   {'taux tunnel mesure', coefx, coefy, nVgx, n_err};...
%   {'taux tunnel efface', coefx, coefy, degree, threshold, off_noise};...
%   {'effet piège', angle, nVgy, nVgx};...
%   {'effet capacitif', A, B, C, D};...
%   {'effet Major', A, B, threshold};...
%   }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Mettre la liste de modifications en ordre logique
order = {...
    'anticroisement 1',...
    'anticroisement 2',...
    'effet piège',...
    'effet capacitif',...
    'taux tunnel signal',...
    'perte sensibilité',...
    'taux tunnel mesure',...
    'taux tunnel efface',...
    'effet Major',...
    };

idx = [];
for i = 1:size(parameters, 2)
    idx = [idx, find(strcmp(order, parameters{i}(1)))];
end
[~, idx] = sort(idx);
parameters = parameters(idx);

simulation.parameters = parameters;


%% Passer de l'occupation électronique à la détection de charge
for i = 1:size(parameters, 2)
    switch parameters{i}{1}
        case 'anticroisement 1'
            simulation.occupation_signal = add_avoided_crossing(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4}, parameters{i}{5},...
                simulation.gates, simulation.CC, simulation.n1, simulation.V_sweep1,...
                simulation.n2, simulation.V_sweep2, simulation.V_oxe, simulation.integrand_x,...
                simulation.eps_0, simulation.x, simulation.dx, simulation.int_min,...
                simulation.int_max, simulation.int_length, simulation.integral_tab);
            simulation.occupation_signal(simulation.occupation_signal==2) = 1;
            
        case 'anticroisement 2'
            simulation.occupation_signal = ddot_avoided_crossing(simulation.occupation, parameters{i}{2});
            
        case 'perte sensibilité'
            occ_modif = create_ellipse_noise(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4},...
                parameters{i}{5}, parameters{i}{6});

            simulation.occupation_trans(occ_modif(1:size(simulation.occupation_trans,1), 1:size(simulation.occupation_trans,2)) - simulation.occupation_signal(1:size(simulation.occupation_trans, 1), 1:size(simulation.occupation_trans, 2)) == -1) = 0;
            simulation.occupation_signal = occ_modif;
            
        case 'taux tunnel signal'
            [simulation.occupation_signal, occ_trans_saver] = exp_enlarge(simulation.occupation_signal, simulation.occupation_trans,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4},...
                parameters{i}{5}, parameters{i}{6});
            
            occ_trans = nan(size(simulation.occupation_trans));
            occ_trans(simulation.occupation_trans>=1) = simulation.occupation_trans(simulation.occupation_trans>=1);
            occ_trans = fillmissing(occ_trans, 'nearest');
            occ_trans(occ_trans_saver==0) = 0;
            simulation.occupation_trans = round(occ_trans, 0);
            
        case 'taux tunnel mesure'
            [simulation.occupation_signal, simulation.occupation_trans] =...
                exp_spread(simulation.occupation_signal, simulation.occupation_trans,...
                parameters{i}{2},parameters{i}{3}, parameters{i}{4},...
                parameters{i}{5});
            
        case 'taux tunnel efface'
            occ_modif = exp_erase(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4},...
                parameters{i}{5});
            
            occ_diff = occ_modif - simulation.occupation_signal;
            simulation.occupation_signal = occ_modif;
            simulation.occupation_trans(occ_diff(1:size(simulation.occupation_trans,1),1:size(simulation.occupation_trans,2))==-1) = 0;
            
        case 'effet piège'
            simulation.occupation_signal = full_translate(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4},...
                simulation.gates, simulation.CC, simulation.n1, simulation.V_sweep1,...
                simulation.n2, simulation.V_sweep2, simulation.V_oxe, simulation.integrand_x,...
                simulation.eps_0, simulation.x, simulation.dx, simulation.int_min,...
                simulation.int_max, simulation.int_length, simulation.integral_tab);
            
            simulation.occupation_trans = full_translate(simulation.occupation_trans,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4},...
                simulation.gates, simulation.CC, simulation.n1, simulation.V_sweep1,...
                simulation.n2, simulation.V_sweep2, simulation.V_oxe, simulation.integrand_x,...
                simulation.eps_0, simulation.x, simulation.dx, simulation.int_min,...
                simulation.int_max, simulation.int_length, simulation.integral_tab);
            
        case 'effet capacitif'
            simulation.occupation_signal = image_distortion(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4}, parameters{i}{5});
            simulation.occupation_trans = image_distortion(simulation.occupation_trans,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4}, parameters{i}{5});
            
        case 'effet Major'
            simulation.occupation_signal = erase_set_signal(simulation.occupation_signal,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4}, parameters{i}{5}, parameters{i}{6}, parameters{i}{7}, parameters{i}{8});
            simulation.occupation_trans = erase_set_signal(simulation.occupation_trans,...
                parameters{i}{2}, parameters{i}{3}, parameters{i}{4}, parameters{i}{5}, parameters{i}{6}, parameters{i}{7}, parameters{i}{8});
    end
end